
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000097a  00000000  00000000  0000019b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000066d  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a4  00000000  00000000  00001182  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e1  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000074  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:


int main(void)
{
	/*configurar el pulsador*/
	DDRB &=~ (1U<<DDB0);			//INPUT
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	84 b9       	out	0x04, r24	; 4
	/*configura los pines donde van conectado los leds*/
	DDRB |= 1U<<DDB2 | 1U<<DDB3;	//OUTPUT
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8c 60       	ori	r24, 0x0C	; 12
  8a:	84 b9       	out	0x04, r24	; 4
	
	for(uint8_t i = 0;i<5;i++){
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	05 c0       	rjmp	.+10     	; 0x9a <main+0x1a>
		while(!(PINB & 1U<<PINB0));	//MIENTRAS NO SE PULSE
  90:	18 9b       	sbis	0x03, 0	; 3
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x10>
		while(PINB & 1U<<PINB0);	//MIENTRAS ESTE PULSADO
  94:	18 99       	sbic	0x03, 0	; 3
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
	/*configurar el pulsador*/
	DDRB &=~ (1U<<DDB0);			//INPUT
	/*configura los pines donde van conectado los leds*/
	DDRB |= 1U<<DDB2 | 1U<<DDB3;	//OUTPUT
	
	for(uint8_t i = 0;i<5;i++){
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	c8 f3       	brcs	.-14     	; 0x90 <main+0x10>
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e c0       	rjmp	.+28     	; 0xbe <main+0x3e>
		while(!(PINB & 1U<<PINB0));	//MIENTRAS NO SE PULSE
		while(PINB & 1U<<PINB0);	//MIENTRAS ESTE PULSADO
	}
	//parpadeo led1
	for(uint8_t i = 0;i<20;i++){
		PORTB ^= 1U<<PORTB2;
  a2:	25 b1       	in	r18, 0x05	; 5
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	82 27       	eor	r24, r18
  a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e5       	ldi	r18, 0x5F	; 95
  ac:	3a ee       	ldi	r19, 0xEA	; 234
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
	for(uint8_t i = 0;i<5;i++){
		while(!(PINB & 1U<<PINB0));	//MIENTRAS NO SE PULSE
		while(PINB & 1U<<PINB0);	//MIENTRAS ESTE PULSADO
	}
	//parpadeo led1
	for(uint8_t i = 0;i<20;i++){
  bc:	9f 5f       	subi	r25, 0xFF	; 255
  be:	94 31       	cpi	r25, 0x14	; 20
  c0:	80 f3       	brcs	.-32     	; 0xa2 <main+0x22>
		PORTB ^= 1U<<PORTB2;
		_delay_ms(300);
	}
	PORTB &=~ 1U<<PORTB2;		//se apaga el led1
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	85 b9       	out	0x05, r24	; 5
	//parpadeo led2
	for(uint8_t i = 0;i<20;i++){
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <main+0x68>
		PORTB ^= 1U<<PORTB3;
  cc:	25 b1       	in	r18, 0x05	; 5
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	82 27       	eor	r24, r18
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	2f e5       	ldi	r18, 0x5F	; 95
  d6:	3a ee       	ldi	r19, 0xEA	; 234
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
		PORTB ^= 1U<<PORTB2;
		_delay_ms(300);
	}
	PORTB &=~ 1U<<PORTB2;		//se apaga el led1
	//parpadeo led2
	for(uint8_t i = 0;i<20;i++){
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	94 31       	cpi	r25, 0x14	; 20
  ea:	80 f3       	brcs	.-32     	; 0xcc <main+0x4c>
		PORTB ^= 1U<<PORTB3;
		_delay_ms(300);
	}
	//encender los dos diodos
	PORTB |= 1U<<PORTB3 | 1U<<PORTB2;
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8c 60       	ori	r24, 0x0C	; 12
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x72>
