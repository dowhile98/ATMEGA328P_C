
P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a5  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Light_Leds 00000012  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.configura_usart 0000001e  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    000000a0  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  58:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  5c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  60:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 03       	mulsu	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.Light_Leds:

00000180 <Light_Leds>:
		
    }
}

void Light_Leds(uint8_t ledNumber){
	PORTB = 1U<<ledNumber;
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <Light_Leds+0xa>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Light_Leds+0x6>
 18e:	25 b9       	out	0x05, r18	; 5
 190:	08 95       	ret

Disassembly of section .text.configura_usart:

00000162 <configura_usart>:

void configura_usart(void)
{
	/****** Configuración de parámetros de comunicación *******/
	// 9600 bps
	UBRR0H = (unsigned char)(Baudios>>8);
 162:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) Baudios;
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Velocidad doble
	UCSR0A = 1<<U2X0;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Comunicación Asíncrona, sin paridad, 1 bit de parada, 8 bits de datos
	UCSR0C=(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	// Tx y Rx habilitadas
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 17e:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void configura_usart(void);

void Light_Leds(uint8_t ledNumber);
int main(void)
{
	DDRD &=~ _BV(DDD2);					//input
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= _BV(PORTD2);				//pull -up resistor
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	8b b9       	out	0x0b, r24	; 11
	configura_usart();
  ce:	0e 94 b1 00 	call	0x162	; 0x162 <configura_usart>
	DDRB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 b9       	out	0x04, r24	; 4
    while(1)
    {
        if(!(PIND & 1U<<PIND2)){
  d6:	4a 99       	sbic	0x09, 2	; 9
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <main+0x32>
			while(!(PIND & 1U<<PIND2));
  da:	4a 9b       	sbis	0x09, 2	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x18>
			PORTB ^= 1U<<PORTB5;
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	89 27       	eor	r24, r25
  e4:	85 b9       	out	0x05, r24	; 5
			state ^= 1;
  e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	89 27       	eor	r24, r25
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			PORTB = 1; 
  f2:	95 b9       	out	0x05, r25	; 5
			
			
		}
		if(state == 1){
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	51 f4       	brne	.+20     	; 0x110 <main+0x4e>
			Light_Leds(shift);
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	0e 94 c0 00 	call	0x180	; 0x180 <Light_Leds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	87 ea       	ldi	r24, 0xA7	; 167
 106:	91 e6       	ldi	r25, 0x61	; 97
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x46>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x4c>
 10e:	00 00       	nop
			_delay_ms(100);
		}
		shift++;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if(shift>=8)
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	10 f0       	brcs	.+4      	; 0x122 <main+0x60>
			shift = 0;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			
		while( !(UCSR0A & (1<<RXC0)) );
 122:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 126:	88 23       	and	r24, r24
 128:	e4 f7       	brge	.-8      	; 0x122 <main+0x60>
		// Lee el dato recibido y analiza si es minúscula o mayúscula
		dato = UDR0;
 12a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
		if ((dato<='z') && (dato>='a')) dato= dato-0x20; // a mayúscula
 132:	9f e9       	ldi	r25, 0x9F	; 159
 134:	98 0f       	add	r25, r24
 136:	9a 31       	cpi	r25, 0x1A	; 26
 138:	20 f4       	brcc	.+8      	; 0x142 <main+0x80>
 13a:	80 52       	subi	r24, 0x20	; 32
 13c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
 140:	07 c0       	rjmp	.+14     	; 0x150 <main+0x8e>
		else if ((dato<='Z') && (dato>='A')) dato=dato+0x20; // a minúscula
 142:	9f eb       	ldi	r25, 0xBF	; 191
 144:	98 0f       	add	r25, r24
 146:	9a 31       	cpi	r25, 0x1A	; 26
 148:	18 f4       	brcc	.+6      	; 0x150 <main+0x8e>
 14a:	80 5e       	subi	r24, 0xE0	; 224
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
		// Espera que se libere el buffer de transmisión
		while( !( UCSR0A & (1<<UDRE0)) );
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	85 ff       	sbrs	r24, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <main+0x8e>
		// Se envía el dato
		UDR0 = dato;
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dato>
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
    }
 160:	ba cf       	rjmp	.-140    	; 0xd6 <main+0x14>
