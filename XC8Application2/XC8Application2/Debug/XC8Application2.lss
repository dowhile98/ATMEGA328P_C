
XC8Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ec  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800100  00800100  000002ec  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a69  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b1  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000274  00000274  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_Init 0000005c  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_Transmit 0000000e  00000266  00000266  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_SendData 00000028  0000023e  0000023e  000002b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 00000018  000000c2  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    00000092  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.libgcc.div 00000044  000001c8  000001c8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.avrlibc 00000032  0000020c  0000020c  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
   8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
   c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  10:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  18:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  20:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  28:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  38:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  3c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  44:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  4c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  58:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  5c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  60:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  64:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 35       	cpi	r16, 0x51	; 81
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 6d 00 	call	0xda	; 0xda <main>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000274 <__bad_interrupt>:
 274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.UART_Init:

0000016c <UART_Init>:
			
    }
}

void UART_Init(uint16_t baud){
	baud = UBRR_VALUE(baud);
 16c:	a0 e0       	ldi	r26, 0x00	; 0
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	9c 01       	movw	r18, r24
 182:	ad 01       	movw	r20, r26
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	44 1f       	adc	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	60 e4       	ldi	r22, 0x40	; 64
 18e:	72 e4       	ldi	r23, 0x42	; 66
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodsi4>
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	31 09       	sbc	r19, r1
	/*set baudrate*/
	UBRR0H = (uint8_t)(baud>>8);
 19c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)baud;
 1a0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/*double speed*/
	UCSR0A = 1U<<U2X0;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	/*Enable receiver and transmitter*/
	UCSR0B |= 1U<<RXEN0 | 1U<<TXEN0;
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 61       	ori	r24, 0x18	; 24
 1b2:	80 83       	st	Z, r24
	/*Set communication parameters*/
	UCSR0C |= 1U<<UCSZ01 | 1U<<UCSZ00;	//8-bit de datos
 1b4:	e2 ec       	ldi	r30, 0xC2	; 194
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	86 60       	ori	r24, 0x06	; 6
 1bc:	80 83       	st	Z, r24
	UCSR0C |= 0U<<USBS0;				//1-bit stop
 1be:	80 81       	ld	r24, Z
 1c0:	80 83       	st	Z, r24
	UCSR0C |= 0U<<UPM01 | 0U<<UPM00;    //no parity
 1c2:	80 81       	ld	r24, Z
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

Disassembly of section .text.UART_Transmit:

00000266 <UART_Transmit>:
}

void UART_Transmit(uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
 266:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 26a:	95 ff       	sbrs	r25, 5
 26c:	fc cf       	rjmp	.-8      	; 0x266 <UART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 26e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 272:	08 95       	ret

Disassembly of section .text.UART_SendData:

0000023e <UART_SendData>:
}
void UART_SendData(uint8_t *dataPtr,uint16_t size){
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	8c 01       	movw	r16, r24
 248:	eb 01       	movw	r28, r22
	while(size>0){
 24a:	06 c0       	rjmp	.+12     	; 0x258 <UART_SendData+0x1a>
		UART_Transmit(*dataPtr);
 24c:	f8 01       	movw	r30, r16
 24e:	81 91       	ld	r24, Z+
 250:	8f 01       	movw	r16, r30
 252:	0e 94 33 01 	call	0x266	; 0x266 <UART_Transmit>
		dataPtr++;
		size--;
 256:	21 97       	sbiw	r28, 0x01	; 1
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
}
void UART_SendData(uint8_t *dataPtr,uint16_t size){
	while(size>0){
 258:	20 97       	sbiw	r28, 0x00	; 0
 25a:	c1 f7       	brne	.-16     	; 0x24c <UART_SendData+0xe>
		UART_Transmit(*dataPtr);
		dataPtr++;
		size--;
	}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

Disassembly of section .text.main:

000000da <main>:
void UART_SendData(uint8_t *dataPtr,uint16_t size);

int main(void)
{
	/*SE CONFIGURA PB3-PB0 -> INPUT PULL-UP*/
	DDRB &=~ (1U<<DDB3 | 1U<<DDB2 | 1U<<DDB1 | 1U<<DDB0);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1U<<PORTB3 | 1U<<PORTB2 | 1U<<PORTB1 | 1U<<PORTB0;
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 60       	ori	r24, 0x0F	; 15
  e4:	85 b9       	out	0x05, r24	; 5
	/*SE CONFIGURA PC4 (P0)*/
	DDRC &=~ (1U<<DDC4);
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	87 b9       	out	0x07, r24	; 7
	PORTC |= 1U<<PORTC4;	//PULL UP
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	88 b9       	out	0x08, r24	; 8
	//SE CONFIGURA EL UART
	UART_Init(4800);
  f2:	80 ec       	ldi	r24, 0xC0	; 192
  f4:	92 e1       	ldi	r25, 0x12	; 18
  f6:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_Init>
    while(1)
    {
        //si se presiona el P0 (validar)
		if(!(PINC & 1U<<4)){
  fa:	34 99       	sbic	0x06, 4	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <main+0x20>
  fe:	04 c0       	rjmp	.+8      	; 0x108 <main+0x2e>
			while(!(PINC & 1U<<4))//mientras se mantenga presionado
			//se lee el numero
			num = 0xF & PINB;
 100:	83 b1       	in	r24, 0x03	; 3
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <num>
	UART_Init(4800);
    while(1)
    {
        //si se presiona el P0 (validar)
		if(!(PINC & 1U<<4)){
			while(!(PINC & 1U<<4))//mientras se mantenga presionado
 108:	34 9b       	sbis	0x06, 4	; 6
 10a:	fa cf       	rjmp	.-12     	; 0x100 <main+0x26>
			//se lee el numero
			num = 0xF & PINB;
			if(num<9){//si el numero es menor a 9
 10c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <num>
 110:	89 30       	cpi	r24, 0x09	; 9
 112:	b0 f4       	brcc	.+44     	; 0x140 <main+0x66>
				len = sprintf((char*)buffer,"1523210219\r\n");
 114:	2d e0       	ldi	r18, 0x0D	; 13
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	42 ec       	ldi	r20, 0xC2	; 194
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 06 01 	call	0x20c	; 0x20c <memcpy>
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <len+0x1>
 12e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <len>
				UART_SendData(buffer,len);
 132:	6c e0       	ldi	r22, 0x0C	; 12
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_SendData>
 13e:	dd cf       	rjmp	.-70     	; 0xfa <main+0x20>
			}
			else{//si el numero es mayor o igual a 9
				len = sprintf((char*)buffer,"Gonzales\r\n");
 140:	2b e0       	ldi	r18, 0x0B	; 11
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	4f ec       	ldi	r20, 0xCF	; 207
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 06 01 	call	0x20c	; 0x20c <memcpy>
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <len+0x1>
 15a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <len>
				UART_SendData(buffer,len); //se envia por el puerto serial
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_SendData>
 16a:	c7 cf       	rjmp	.-114    	; 0xfa <main+0x20>

Disassembly of section .text.libgcc.div:

000001c8 <__udivmodsi4>:
 1c8:	a1 e2       	ldi	r26, 0x21	; 33
 1ca:	1a 2e       	mov	r1, r26
 1cc:	aa 1b       	sub	r26, r26
 1ce:	bb 1b       	sub	r27, r27
 1d0:	fd 01       	movw	r30, r26
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <__udivmodsi4_ep>

000001d4 <__udivmodsi4_loop>:
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	ee 1f       	adc	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e4 07       	cpc	r30, r20
 1e2:	f5 07       	cpc	r31, r21
 1e4:	20 f0       	brcs	.+8      	; 0x1ee <__udivmodsi4_ep>
 1e6:	a2 1b       	sub	r26, r18
 1e8:	b3 0b       	sbc	r27, r19
 1ea:	e4 0b       	sbc	r30, r20
 1ec:	f5 0b       	sbc	r31, r21

000001ee <__udivmodsi4_ep>:
 1ee:	66 1f       	adc	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	88 1f       	adc	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	1a 94       	dec	r1
 1f8:	69 f7       	brne	.-38     	; 0x1d4 <__udivmodsi4_loop>
 1fa:	60 95       	com	r22
 1fc:	70 95       	com	r23
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	9b 01       	movw	r18, r22
 204:	ac 01       	movw	r20, r24
 206:	bd 01       	movw	r22, r26
 208:	cf 01       	movw	r24, r30
 20a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000020c <memcpy>:
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	dc 01       	movw	r26, r24
 214:	6a 01       	movw	r12, r20
 216:	e6 2e       	mov	r14, r22
 218:	28 0f       	add	r18, r24
 21a:	39 1f       	adc	r19, r25
 21c:	a2 17       	cp	r26, r18
 21e:	b3 07       	cpc	r27, r19
 220:	51 f0       	breq	.+20     	; 0x236 <memcpy+0x2a>
 222:	f6 01       	movw	r30, r12
 224:	44 91       	lpm	r20, Z
 226:	e7 fc       	sbrc	r14, 7
 228:	40 81       	ld	r20, Z
 22a:	4d 93       	st	X+, r20
 22c:	4f ef       	ldi	r20, 0xFF	; 255
 22e:	c4 1a       	sub	r12, r20
 230:	d4 0a       	sbc	r13, r20
 232:	e4 0a       	sbc	r14, r20
 234:	f3 cf       	rjmp	.-26     	; 0x21c <memcpy+0x10>
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	08 95       	ret
