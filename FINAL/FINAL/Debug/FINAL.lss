
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003cc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800100  00800100  000003cc  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bca  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000314  00000314  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.UART_Init 0000005c  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_Transmit 0000000e  000002fc  000002fc  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_SendData 00000028  000002d4  000002d4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.setDuty 0000000a  0000030a  0000030a  000003be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TIMER1_ConfiPWM 0000005c  00000202  00000202  000002b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000019  000000c8  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    000000c4  000000e2  000000e2  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .data.duty    00000001  00800167  000000e1  00000195  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.libgcc.div 00000044  0000025e  0000025e  00000312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.avrlibc 00000032  000002a2  000002a2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
   8:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
   c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  10:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  14:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  18:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  1c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  20:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  2c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  30:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  38:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  3c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  40:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  44:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  48:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  4c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  50:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  54:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  5c:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  60:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>
  64:	0c 94 8a 01 	jmp	0x314	; 0x314 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 67       	ori	r16, 0x71	; 113
  6c:	80 01       	movw	r16, r0
  6e:	67 01       	movw	r12, r14
  70:	68 00       	.word	0x0068	; ????
  72:	00 e1       	ldi	r16, 0x10	; 16

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000314 <__bad_interrupt>:
 314:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.UART_Init:

000001a6 <UART_Init>:
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return UDR0;
}
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	9c 01       	movw	r18, r24
 1bc:	ad 01       	movw	r20, r26
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	44 1f       	adc	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	60 e4       	ldi	r22, 0x40	; 64
 1c8:	72 e4       	ldi	r23, 0x42	; 66
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 2f 01 	call	0x25e	; 0x25e <__udivmodsi4>
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	31 09       	sbc	r19, r1
 1d6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1da:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1e4:	e1 ec       	ldi	r30, 0xC1	; 193
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 61       	ori	r24, 0x18	; 24
 1ec:	80 83       	st	Z, r24
 1ee:	e2 ec       	ldi	r30, 0xC2	; 194
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	86 60       	ori	r24, 0x06	; 6
 1f6:	80 83       	st	Z, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	80 83       	st	Z, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

Disassembly of section .text.UART_Transmit:

000002fc <UART_Transmit>:
}

void UART_Transmit(uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
 2fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 300:	95 ff       	sbrs	r25, 5
 302:	fc cf       	rjmp	.-8      	; 0x2fc <UART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 304:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 308:	08 95       	ret

Disassembly of section .text.UART_SendData:

000002d4 <UART_SendData>:
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return UDR0;
}

void UART_SendData(uint8_t *dataPtr,uint16_t size){
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8c 01       	movw	r16, r24
 2de:	eb 01       	movw	r28, r22
	while(size>0){
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <UART_SendData+0x1a>
		UART_Transmit(*dataPtr);
 2e2:	f8 01       	movw	r30, r16
 2e4:	81 91       	ld	r24, Z+
 2e6:	8f 01       	movw	r16, r30
 2e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_Transmit>
		dataPtr++;
		size--;
 2ec:	21 97       	sbiw	r28, 0x01	; 1
	/* Get and return received data from buffer */
	return UDR0;
}

void UART_SendData(uint8_t *dataPtr,uint16_t size){
	while(size>0){
 2ee:	20 97       	sbiw	r28, 0x00	; 0
 2f0:	c1 f7       	brne	.-16     	; 0x2e2 <UART_SendData+0xe>
		UART_Transmit(*dataPtr);
		dataPtr++;
		size--;
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

Disassembly of section .text.setDuty:

0000030a <setDuty>:
}

uint16_t setDuty(uint8_t duty){
	uint16_t temp = duty * (6249/100);
	return temp;
 30a:	2e e3       	ldi	r18, 0x3E	; 62
 30c:	82 9f       	mul	r24, r18
 30e:	c0 01       	movw	r24, r0
 310:	11 24       	eor	r1, r1
 312:	08 95       	ret

Disassembly of section .text.TIMER1_ConfiPWM:

00000202 <TIMER1_ConfiPWM>:
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return UDR0;
}
 202:	84 b1       	in	r24, 0x04	; 4
 204:	86 60       	ori	r24, 0x06	; 6
 206:	84 b9       	out	0x04, r24	; 4
 208:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 20c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 210:	89 e6       	ldi	r24, 0x69	; 105
 212:	98 e1       	ldi	r25, 0x18	; 24
 214:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 218:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 21c:	e0 e8       	ldi	r30, 0x80	; 128
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	80 83       	st	Z, r24
 224:	80 81       	ld	r24, Z
 226:	80 62       	ori	r24, 0x20	; 32
 228:	80 83       	st	Z, r24
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
 230:	e1 e8       	ldi	r30, 0x81	; 129
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	88 e1       	ldi	r24, 0x18	; 24
 236:	80 83       	st	Z, r24
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
 23e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_end>
 242:	0e 94 85 01 	call	0x30a	; 0x30a <setDuty>
 246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 24e:	82 e3       	ldi	r24, 0x32	; 50
 250:	0e 94 85 01 	call	0x30a	; 0x30a <setDuty>
 254:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 258:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 25c:	08 95       	ret

Disassembly of section .text.main:

000000e2 <main>:
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	87 b9       	out	0x07, r24	; 7
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	95 e2       	ldi	r25, 0x25	; 37
  f2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Init>
  f6:	0e 94 01 01 	call	0x202	; 0x202 <TIMER1_ConfiPWM>
  fa:	29 e1       	ldi	r18, 0x19	; 25
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	48 ec       	ldi	r20, 0xC8	; 200
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 51 01 	call	0x2a2	; 0x2a2 <memcpy>
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <len+0x1>
 114:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <len>
 118:	68 e1       	ldi	r22, 0x18	; 24
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <UART_SendData>
 124:	31 99       	sbic	0x06, 1	; 6
 126:	18 c0       	rjmp	.+48     	; 0x158 <main+0x76>
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x4a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x50>
 132:	00 00       	nop
 134:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_end>
 138:	8a 50       	subi	r24, 0x0A	; 10
 13a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_end>
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	18 f4       	brcc	.+6      	; 0x148 <main+0x66>
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_end>
 148:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_end>
 14c:	0e 94 85 01 	call	0x30a	; 0x30a <setDuty>
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 158:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15c:	88 23       	and	r24, r24
 15e:	e4 f4       	brge	.+56     	; 0x198 <main+0xb6>
 160:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 168:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_Transmit>
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	81 34       	cpi	r24, 0x41	; 65
 172:	91 f4       	brne	.+36     	; 0x198 <main+0xb6>
 174:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_end>
 178:	86 5f       	subi	r24, 0xF6	; 246
 17a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_end>
 17e:	8b 35       	cpi	r24, 0x5B	; 91
 180:	18 f0       	brcs	.+6      	; 0x188 <main+0xa6>
 182:	8a e5       	ldi	r24, 0x5A	; 90
 184:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_end>
 188:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_end>
 18c:	0e 94 85 01 	call	0x30a	; 0x30a <setDuty>
 190:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 194:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 198:	8f e4       	ldi	r24, 0x4F	; 79
 19a:	93 ec       	ldi	r25, 0xC3	; 195
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xba>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xc0>
 1a2:	00 00       	nop
 1a4:	bf cf       	rjmp	.-130    	; 0x124 <main+0x42>

Disassembly of section .text.libgcc.div:

0000025e <__udivmodsi4>:
 25e:	a1 e2       	ldi	r26, 0x21	; 33
 260:	1a 2e       	mov	r1, r26
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	fd 01       	movw	r30, r26
 268:	0d c0       	rjmp	.+26     	; 0x284 <__udivmodsi4_ep>

0000026a <__udivmodsi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	ee 1f       	adc	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	a2 17       	cp	r26, r18
 274:	b3 07       	cpc	r27, r19
 276:	e4 07       	cpc	r30, r20
 278:	f5 07       	cpc	r31, r21
 27a:	20 f0       	brcs	.+8      	; 0x284 <__udivmodsi4_ep>
 27c:	a2 1b       	sub	r26, r18
 27e:	b3 0b       	sbc	r27, r19
 280:	e4 0b       	sbc	r30, r20
 282:	f5 0b       	sbc	r31, r21

00000284 <__udivmodsi4_ep>:
 284:	66 1f       	adc	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	1a 94       	dec	r1
 28e:	69 f7       	brne	.-38     	; 0x26a <__udivmodsi4_loop>
 290:	60 95       	com	r22
 292:	70 95       	com	r23
 294:	80 95       	com	r24
 296:	90 95       	com	r25
 298:	9b 01       	movw	r18, r22
 29a:	ac 01       	movw	r20, r24
 29c:	bd 01       	movw	r22, r26
 29e:	cf 01       	movw	r24, r30
 2a0:	08 95       	ret

Disassembly of section .text.avrlibc:

000002a2 <memcpy>:
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	dc 01       	movw	r26, r24
 2aa:	6a 01       	movw	r12, r20
 2ac:	e6 2e       	mov	r14, r22
 2ae:	28 0f       	add	r18, r24
 2b0:	39 1f       	adc	r19, r25
 2b2:	a2 17       	cp	r26, r18
 2b4:	b3 07       	cpc	r27, r19
 2b6:	51 f0       	breq	.+20     	; 0x2cc <memcpy+0x2a>
 2b8:	f6 01       	movw	r30, r12
 2ba:	44 91       	lpm	r20, Z
 2bc:	e7 fc       	sbrc	r14, 7
 2be:	40 81       	ld	r20, Z
 2c0:	4d 93       	st	X+, r20
 2c2:	4f ef       	ldi	r20, 0xFF	; 255
 2c4:	c4 1a       	sub	r12, r20
 2c6:	d4 0a       	sbc	r13, r20
 2c8:	e4 0a       	sbc	r14, r20
 2ca:	f3 cf       	rjmp	.-26     	; 0x2b2 <memcpy+0x10>
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret
